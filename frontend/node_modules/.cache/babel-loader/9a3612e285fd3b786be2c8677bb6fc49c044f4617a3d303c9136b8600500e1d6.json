{"ast":null,"code":"var _jsxFileName = \"/Users/anishniure/Desktop/FYP/frontend/src/components/ForgotPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../styles/ForgotPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForgotPassword = () => {\n  _s();\n  const {\n    token\n  } = useParams(); // Get token from URL for reset password\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // If there's a token in the URL, we're in \"reset password\" mode\n  const isResetMode = !!token;\n  const handleForgotPassword = async e => {\n    e.preventDefault();\n    setMessage('');\n    setError('');\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message);\n      } else {\n        setError(data.message || 'An error occurred.');\n      }\n    } catch (err) {\n      setError('Failed to connect to server. Check your network or backend.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setMessage('');\n    setError('');\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:5001/api/auth/reset-password/${token}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: newPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message);\n        setTimeout(() => navigate('/'), 2000); // Redirect to home after 2 seconds\n      } else {\n        setError(data.message || 'An error occurred.');\n      }\n    } catch (err) {\n      setError('Failed to connect to server. Check your network or backend.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forgot-password-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forgot-password-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: isResetMode ? 'Reset Password' : 'Forgot Password'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success-message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 27\n      }, this), !isResetMode ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleForgotPassword,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter your email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: isLoading ? 'Sending...' : 'Send Reset Link'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleResetPassword,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter new password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: isLoading ? 'Resetting...' : 'Reset Password'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(ForgotPassword, \"qR/EUgX2TMHPaMQHvT4n2+xT04s=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","ForgotPassword","_s","token","navigate","email","setEmail","newPassword","setNewPassword","message","setMessage","error","setError","isLoading","setIsLoading","isResetMode","handleForgotPassword","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","err","handleResetPassword","password","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["/Users/anishniure/Desktop/FYP/frontend/src/components/ForgotPassword.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../styles/ForgotPassword.css';\n\nconst ForgotPassword = () => {\n    const { token } = useParams(); // Get token from URL for reset password\n    const navigate = useNavigate();\n    const [email, setEmail] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [message, setMessage] = useState('');\n    const [error, setError] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    // If there's a token in the URL, we're in \"reset password\" mode\n    const isResetMode = !!token;\n\n    const handleForgotPassword = async (e) => {\n        e.preventDefault();\n        setMessage('');\n        setError('');\n        setIsLoading(true);\n\n        try {\n            const response = await fetch('http://localhost:5001/api/auth/forgot-password', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ email }),\n            });\n            const data = await response.json();\n            if (response.ok) {\n                setMessage(data.message);\n            } else {\n                setError(data.message || 'An error occurred.');\n            }\n        } catch (err) {\n            setError('Failed to connect to server. Check your network or backend.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleResetPassword = async (e) => {\n        e.preventDefault();\n        setMessage('');\n        setError('');\n        setIsLoading(true);\n\n        try {\n            const response = await fetch(`http://localhost:5001/api/auth/reset-password/${token}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ password: newPassword }),\n            });\n            const data = await response.json();\n            if (response.ok) {\n                setMessage(data.message);\n                setTimeout(() => navigate('/'), 2000); // Redirect to home after 2 seconds\n            } else {\n                setError(data.message || 'An error occurred.');\n            }\n        } catch (err) {\n            setError('Failed to connect to server. Check your network or backend.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"forgot-password-container\">\n            <div className=\"forgot-password-card\">\n                <h2>{isResetMode ? 'Reset Password' : 'Forgot Password'}</h2>\n                {message && <p className=\"success-message\">{message}</p>}\n                {error && <p className=\"error-message\">{error}</p>}\n                {!isResetMode ? (\n                    <form onSubmit={handleForgotPassword}>\n                        <input\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            required\n                        />\n                        <button type=\"submit\" disabled={isLoading}>\n                            {isLoading ? 'Sending...' : 'Send Reset Link'}\n                        </button>\n                    </form>\n                ) : (\n                    <form onSubmit={handleResetPassword}>\n                        <input\n                            type=\"password\"\n                            placeholder=\"Enter new password\"\n                            value={newPassword}\n                            onChange={(e) => setNewPassword(e.target.value)}\n                            required\n                        />\n                        <button type=\"submit\" disabled={isLoading}>\n                            {isLoading ? 'Resetting...' : 'Reset Password'}\n                        </button>\n                    </form>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ForgotPassword;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}